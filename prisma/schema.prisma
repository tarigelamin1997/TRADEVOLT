datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  clerkId   String   @unique
  isPaid    Boolean  @default(false)
  trades    Trade[]
  createdAt DateTime @default(now())
}

model Trade {
  id              String    @id @default(cuid())
  userId          String
  symbol          String
  type            String    // "BUY" or "SELL"
  entry           Float
  exit            Float?
  quantity        Float
  notes           String?
  marketType      String?   // "FUTURES", "OPTIONS", "FOREX", "CRYPTO", "STOCKS"
  entryTime       DateTime?
  exitTime        DateTime?
  
  // Excursion Metrics
  mae             Float?    // Maximum Adverse Excursion (%)
  mfe             Float?    // Maximum Favorable Excursion (%)
  edgeRatio       Float?    // MFE/MAE ratio
  updrawPercent   Float?    // How close to take profit (%)
  takeProfitPrice Float?    // Target price for take profit
  stopLossPrice   Float?    // Stop loss price
  
  // Execution Quality Fields
  intendedEntry   Float?    // Planned entry price
  intendedExit    Float?    // Planned exit price
  commission      Float?    // Trading fees/commission
  wasStopLossHit  Boolean?  // Whether SL was triggered
  wasTakeProfitHit Boolean? // Whether TP was triggered
  exitReason      String?   // STOP_LOSS, TAKE_PROFIT, MANUAL, OTHER
  
  createdAt       DateTime  @default(now())
  
  user            User              @relation(fields: [userId], references: [id])
  priceData       TradePriceData[]
  excursions      TradeExcursion[]
  partialExits    PartialExit[]
  
  @@index([userId, createdAt])
  @@index([userId, symbol])
}

model TradePriceData {
  id        String   @id @default(cuid())
  tradeId   String
  timestamp DateTime
  price     Float
  volume    Float?
  createdAt DateTime @default(now())
  
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model TradeExcursion {
  id                 String   @id @default(cuid())
  tradeId            String
  timestamp          DateTime
  price              Float
  runningPnl         Float
  runningPnlPercent  Float
  maeAtTime          Float
  mfeAtTime          Float
  
  trade              Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model PartialExit {
  id         String   @id @default(cuid())
  tradeId    String
  price      Float
  quantity   Float
  timestamp  DateTime
  commission Float?
  reason     String?  // SCALE_OUT, TAKE_PROFIT, STOP_LOSS, MANUAL
  createdAt  DateTime @default(now())
  
  trade      Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model BrokerConnection {
  id                    String   @id @default(cuid())
  userId                String
  platform              String   // "MT4" or "MT5"
  accountName           String
  accountId             String   @unique
  accountLogin          String
  serverName            String
  metaApiAccountId      String?  @unique
  provisioningProfileId String?
  connectionStatus      String   @default("disconnected") // disconnected, connecting, connected, error
  lastSync              DateTime?
  autoSync              Boolean  @default(false)
  encryptedPassword     String   // Encrypted MT4/5 password
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
}