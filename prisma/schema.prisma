datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  clerkId   String   @unique
  isPaid    Boolean  @default(false)
  trades    Trade[]
  
  // Affiliate fields
  isAffiliate       Boolean       @default(false)
  affiliateProfile  Affiliate?
  referredBy        String?       // Affiliate code that referred this user
  referredByAffiliate Affiliate?  @relation("ReferredUsers", fields: [referredBy], references: [referralCode])
  
  createdAt DateTime @default(now())
  
  @@index([referredBy])
}

model Trade {
  id              String    @id @default(cuid())
  userId          String
  symbol          String
  type            String    // "BUY" or "SELL"
  entry           Float
  exit            Float?
  quantity        Float
  notes           String?
  marketType      String?   // "FUTURES", "OPTIONS", "FOREX", "CRYPTO", "STOCKS"
  entryTime       DateTime?
  exitTime        DateTime?
  
  // Excursion Metrics
  mae             Float?    // Maximum Adverse Excursion (%)
  mfe             Float?    // Maximum Favorable Excursion (%)
  edgeRatio       Float?    // MFE/MAE ratio
  updrawPercent   Float?    // How close to take profit (%)
  takeProfitPrice Float?    // Target price for take profit
  stopLossPrice   Float?    // Stop loss price
  
  // Execution Quality Fields
  intendedEntry   Float?    // Planned entry price
  intendedExit    Float?    // Planned exit price
  commission      Float?    // Trading fees/commission
  wasStopLossHit  Boolean?  // Whether SL was triggered
  wasTakeProfitHit Boolean? // Whether TP was triggered
  exitReason      String?   // STOP_LOSS, TAKE_PROFIT, MANUAL, OTHER
  
  createdAt       DateTime  @default(now())
  
  user            User              @relation(fields: [userId], references: [id])
  priceData       TradePriceData[]
  excursions      TradeExcursion[]
  partialExits    PartialExit[]
  
  @@index([userId, createdAt])
  @@index([userId, symbol])
}

model TradePriceData {
  id        String   @id @default(cuid())
  tradeId   String
  timestamp DateTime
  price     Float
  volume    Float?
  createdAt DateTime @default(now())
  
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model TradeExcursion {
  id                 String   @id @default(cuid())
  tradeId            String
  timestamp          DateTime
  price              Float
  runningPnl         Float
  runningPnlPercent  Float
  maeAtTime          Float
  mfeAtTime          Float
  
  trade              Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model PartialExit {
  id         String   @id @default(cuid())
  tradeId    String
  price      Float
  quantity   Float
  timestamp  DateTime
  commission Float?
  reason     String?  // SCALE_OUT, TAKE_PROFIT, STOP_LOSS, MANUAL
  createdAt  DateTime @default(now())
  
  trade      Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, timestamp])
}

model BrokerConnection {
  id                    String   @id @default(cuid())
  userId                String
  platform              String   // Extended to support all platforms (MT4, MT5, Binance, TradingView, etc.)
  accountName           String
  accountId             String   @unique
  accountLogin          String?  // Optional for OAuth/API key based platforms
  serverName            String?  // Optional for non-MT platforms
  
  // Platform-specific IDs
  metaApiAccountId      String?  @unique  // MetaTrader via MetaAPI
  provisioningProfileId String?           // MetaAPI provisioning
  externalAccountId     String?           // Platform's native account ID
  
  // Authentication fields (encrypted)
  encryptedPassword     String?  // MT4/5 password
  encryptedApiKey       String?  // API key for REST APIs
  encryptedApiSecret    String?  // API secret
  encryptedAccessToken  String?  // OAuth access token
  encryptedRefreshToken String?  // OAuth refresh token
  webhookSecret         String?  // Webhook verification secret
  
  // Connection management
  connectionStatus      String   @default("disconnected") // disconnected, connecting, connected, error, webhook_only
  connectionMethod      String?  // rest-api, websocket, oauth2, webhook, csv-import
  lastSync              DateTime?
  autoSync              Boolean  @default(false)
  syncInterval          Int?     @default(60) // Minutes between syncs
  
  // Feature flags
  supportsRealtime      Boolean  @default(false)
  supportsHistorical    Boolean  @default(true)
  supportsPositions     Boolean  @default(false)
  supportsOrders        Boolean  @default(false)
  
  // Metadata
  brokerName            String?  // Actual broker name (e.g., "OANDA", "Pepperstone")
  accountType           String?  // live, demo, paper
  accountCurrency       String?  // USD, EUR, etc.
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([platform])
}

// Affiliate System Models
model Affiliate {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  
  // Basic Information
  referralCode     String   @unique
  customLink       String?  // Custom vanity URL
  status           String   @default("pending") // pending, active, suspended, terminated
  
  // Commission Tier
  currentTier      String   @default("bronze") // bronze, silver, gold, diamond
  customCommission Float?   // Override default tier commission
  
  // Performance Metrics
  totalEarnings    Float    @default(0)
  pendingPayout    Float    @default(0)
  lifetimeValue    Float    @default(0)
  totalReferrals   Int      @default(0)
  activeCustomers  Int      @default(0)
  conversionRate   Float    @default(0)
  
  // Payment Information
  paymentMethod    String?  // bank_transfer, paypal, wise, crypto
  paymentDetails   Json?    // Encrypted payment details
  taxFormStatus    String?  // pending, submitted, verified
  taxFormData      Json?    // W-9/W-8 information
  
  // Marketing Materials
  hasCustomMaterials Boolean @default(false)
  customBranding   Json?    // Custom colors, logos, etc.
  
  // Notifications
  emailNewReferral Boolean  @default(true)
  emailMonthlyReport Boolean @default(true)
  emailPayouts     Boolean  @default(true)
  
  // Timestamps
  approvedAt       DateTime?
  lastActiveAt     DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  referrals        AffiliateReferral[]
  commissions      AffiliateCommission[]
  payouts          AffiliatePayout[]
  tierHistory      AffiliateTierHistory[]
  referredUsers    User[]    @relation("ReferredUsers")
  
  @@index([referralCode])
  @@index([status])
  @@index([currentTier])
}

model AffiliateReferral {
  id               String   @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  
  // Customer Information
  customerId       String
  customerEmail    String
  customerName     String?
  
  // Tracking
  clickId          String?  @unique // Tracking click ID
  ipAddress        String?
  userAgent        String?
  referrerUrl      String?
  landingPage      String?
  utmSource        String?
  utmMedium        String?
  utmCampaign      String?
  
  // Status
  status           String   @default("clicked") // clicked, trial, active, churned, refunded
  subscriptionPlan String?  // starter, pro, premium
  discountCode     String?
  discountAmount   Float?
  
  // Dates
  clickedAt        DateTime @default(now())
  signedUpAt       DateTime?
  subscribedAt     DateTime?
  churnedAt        DateTime?
  
  // Metrics
  monthlyValue     Float    @default(0)
  lifetimeValue    Float    @default(0)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([affiliateId])
  @@index([customerId])
  @@index([status])
  @@index([clickedAt])
}

model AffiliateCommission {
  id               String   @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  
  // Commission Details
  referralId       String
  amount           Float
  percentage       Float    // Commission percentage used
  tier             String   // Tier at time of commission
  
  // Period
  month            Int      // 1-12
  year             Int      // e.g., 2025
  
  // Status
  status           String   @default("pending") // pending, approved, paid, cancelled
  
  // Payment
  payoutId         String?
  payout           AffiliatePayout? @relation(fields: [payoutId], references: [id])
  
  // Metadata
  description      String?
  customerEmail    String?
  subscriptionPlan String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([affiliateId])
  @@index([status])
  @@index([month, year])
  @@index([payoutId])
}

model AffiliatePayout {
  id               String   @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  
  // Payout Details
  amount           Float
  currency         String   @default("USD")
  method           String   // bank_transfer, paypal, wise, crypto
  
  // Status
  status           String   @default("pending") // pending, processing, completed, failed
  
  // Period
  periodStart      DateTime
  periodEnd        DateTime
  
  // Transaction Details
  transactionId    String?  @unique
  transactionFee   Float?
  netAmount        Float?
  
  // Metadata
  notes            String?
  failureReason    String?
  
  // Dates
  scheduledDate    DateTime
  processedDate    DateTime?
  completedDate    DateTime?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  commissions      AffiliateCommission[]
  
  @@index([affiliateId])
  @@index([status])
  @@index([scheduledDate])
}

model AffiliateTierHistory {
  id               String   @id @default(cuid())
  affiliateId      String
  affiliate        Affiliate @relation(fields: [affiliateId], references: [id])
  
  // Tier Change
  previousTier     String
  newTier          String
  
  // Performance at Change
  monthlySales     Float
  monthlyReferrals Int
  
  // Period
  month            Int
  year             Int
  
  createdAt        DateTime @default(now())
  
  @@index([affiliateId])
  @@index([createdAt])
}